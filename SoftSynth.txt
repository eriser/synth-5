1. Overview

	Software synth on Raspberry Pi (or similar) bare metal (or at least minimal fast-boot Linux OS).

2. Requirements

	To sound good: 
	- At least 8 notes polyphonic (16 voices)
	- Each note must be multi-timbral (multiple oscillators)
	- ADSR envelope
	- Various oscillator waveforms
		+ noise
		+ custom wave
		+ "phase shifting" the waveform ("variable duty cycle")
	- LFO and modulation
		- LFO waveforms
		- Route LFO to pitch or volume or filter
	- Effects on individual notes or master output
		- Compression
		- Reverb / delay / chorus
		- Filter cutoff and "Q"
	- Sample playback
		- For audio tracks

	Control:
	- Triggering notes
		- Handle MIDI note on / note off messages
		- Handle "running" note on/off messages (?)
	- Modulation
		- MIDI Pitch bend messages
		- MIDI Mod wheel messages
	- Tweaking parameters
		- MIDI control messages
		- Use de-facto standard message numbers
	- Selecting patches
		- MIDI patch select messages
		- Use de-facto standards for patch select
	- Mapping MIDI channels to patches
		- For supporting keyboard splits, drums etc
	- Arpeggiator
		- Various patterns
		- Custom patterns
		- Various speeds
	- Timing and sync
		- Set BPM (for arpegiattor, sequencer etc)
		- Sync to external (MIDI sync)

	Composing:
	- Sequencer
		- Sends MIDI message to the synth engine
		- Separate app from the synth engine?
		- Tracker? "Phrase sequencer"?
	- Composing tools (?)




3. Design/Implementation:

- Synth engine (C++) running in one process 
- Sequencer etc running on another core
- GUI (python) running in another process
- UI and synth / sequencer talk to each other using IPC (mqueue)
- OO C++ and Python
- Portability


CWaveSynth:
	- Manage Patches
		- Patch collection
		- Save / load patches
		- Copy patches
	- Manages active voices
		- Assigns voices (NoteOn())
		- Sets up voices with Patch settings
		- Updates voices
			- Update voice vol/pitch/filter from patch envelopes
			- Update voice vol/pitch filter from patch LFO
			- Disables voice after release finished
	- Mixes voices to output buffer (using CMixer)
	- Handles transpose
	- Recieves and processes MIDI messages:
		- MIDI note on/off
		- MIDI control change
			- Pitch bend and modulation
			- Patch change
			- Tweak knobs


CPatch:
	- Name
	- OSC1 + OSC2 			"COscillator" class
		- Waveform   
		- Duty cycle (PWM)
		- Detune
		- volume envelope
		- pitch envelope
		- filter envelope
		- Q ("peak")

	- LFO				"CLFO" class
		- LFO waveform
		- LFO freq
		- LFO pitch envelope	(sets level from "sustain" level)  (vibrato)
		- LFO volume envelope	(sets level)  (tremolo)
		- LFO filter envelope	(sets level)
		- LFO PWM envelope      (sets level)

	- Modulation			"CModulator" class
		- Pitch bend range
		- Modulation range
		- Modulation target(s)
			- PWM      (relative)
			- Filter   (relative)
			- LFO freq (relative)




Structure
                                  WAVESYNTH
                                      |
              +----------------+------+-------+---------------+
              |                |              |               |
           PATCHES   --->    VOICES  --->   MIXER        MIDI / OSC   


MIDI In Interface:
	- 6N138 optoisolator
	- 1N4148 diode
	- 220 ohm resistor
	- 1 k resistor
	- 10 k resistor


GUI:

1. "Main" (overview)
	- Patch selector
	- Current patch settings
		- Patch name
		- Patch relative volume
		- Patch OSC1 settings
			- Waveform   
			- Duty cycle (PWM)
			- Detune
			- volume envelope
			- pitch envelope
			- filter envelope
			- Q ("peak")
		- Patch OSC2 settings
			- Waveform   
			- Duty cycle (PWM)
			- Detune
			- volume envelope
			- pitch envelope
			- filter envelope
			- Q ("peak")
		- Patch LFO settings (become current LFO settings when patch selected)
			- LFO waveform
			- LFO freq
			- LFO pitch envelope	(sets level from "sustain" level)  (vibrato)
			- LFO volume envelope	(sets level)  (tremolo)
			- LFO filter envelope	(sets level)
			- LFO PWM envelope      (sets level)
		- Patch Mod settings (become current mod settings when patch selected)
			- Pitch bend range
			- Modulation range
			- Modulation target(s)
	- FX settings (type & params)
	- Mod Settings and LFO settings
	- "Save" button (to save changes to patch settings)
		- NOTE: Synth engine keeps a "working" copy of the current patch
		-       When you save, this working copy is copied back to the current patch

2. "System"
	- MIDI config
		- Mapping of midi controller id's to synth settings
	- 

3. Patch Edit
	- Incorporated into main screen?
	- NOTE: "Save" copies the "working" patch data to the relevant patch 


4. Sequencer
	- 8 Tracks
	- 1 Drum track
	- Phrase sequencer?
	- Import audio (WAV files)
	- Drum pattern editor





MESSAGE SYSTEM

Uses mqueue POSIX messaging.
For Win32 version, see https://github.com/marklakata/mqueue-w32

Messages.h and Messages.cpp  (shared between the ENGINE and GUI projects)

TODO : test round-trip time of a message (using "test" message)
	- start timer
	- send message from GUI to synth
	- recieve message from synth
	- stop timer


Synth Engine Messages:

	- Recieve messages from GUI / MIDI
	- Send message to GUI when something changes internally

Note On (8x)
Note Off (9x)
Patch change (Cx)
Control Change (Bx cc nn)
	- cc = controller number
		- 01 = Mod wheel
		- 05 = Portamento time
		- 07 = Channel volume
		- 08 = balance
		- 0A = pan
		- 0C = effect 1 control
		- 0D = effect 2 control
		- 40 = damper (sustain) pedal
		- 5B = Reverb depth
		- 5C = Tremolo depth
		- 5D = Chorus depth
		- 5E = detune depth
		- 5F = Phaser depth
		- 79 = Reset all controllers
		- 7A = Local control
		- 7B = All notes off
		- 7C = Omni off
		- 7D = Omni on
		- 7E = Mono mode
		- 7F = Poly mode

	- nn = 0 to 40 to 7F
Pitch bend (Ex)

Clock (F8)
Seqence start (FA)
Sequence resume (FB)
Sequence stop (FC)
Reset (FF)

Patch Edit messages (Sysex? F0 7D)
	- Set patch name
	- Set patch OSC parameters
	- Set patch LFO paremeters
	- Save patch


Sysex:
F0 7E deviceId subID ... F7 - Non-RT Universal sysex
F0 7F deviceId subID ... F7 - RT Universal sysex

F0 7D ...  F7      - Non commercial sysex


Roland EG-101 patch "parameters":

F0 41 10 42 12 40 00 04 dd F0

41 = manufacturer id
10 = device id
42 = model id
12 = command ID ("DT1" (12) or "RQ1" (11))
40 00 04 = parameter "address"
dd = data
"40 00 04" = parameter "address"
dd = data

When using RQ1, then the data is the size of the info we want

Example: Set Reverb level to 50% (0x40):
F0 41 10 42 12 40 01 33 40 cs F7



Synth GUI Messages (update the GUI):

Patch Edit MEssages
	- Same as for synth engine
	- Send "RQ1" message to request parameters
	- Read the params

eg1: Request patch parameters
	- Send patch change message (Cx nn)
	- Request current patch parameters:
		- F0 7D 01 01 11 00 00 FF 00 F7  (address = 00, size = FF)
	- Recieve patch parameters (as a block?)
		- F0 7D 01 01 12 00 00 size dd dd dd ... dd cs F7

eg2: Update patch parameters
	- Send patch change message (if neccessary)
	- Send patch sysex data block
		- F0 7D 01 01 12 00 00 size dd dd dd ... dd cs F7
	- Can send address = 00 00, size = 86 for all patch data
	- Can send eg: address = PADDR_LFO, size = 20 for just LFO data
	NOTE: The "working" patch is updated when you update pathc parameters via the message system. To save your changes (make them permanent), you have to send a "Save" command. (Use CC 120 ? (undefined))


Other GUI Messages (update the GUI):
	- Sysex patch address/data messages to update patch info
	- CC messages to update modulator position etc
	- CC messages to update FX settings


Packing of patch parameters (binary pack, ~75 bytes):
- name[20]
- mix volume 00 - 7F
- OSC1 params:
	- Waveform   00 - ??
	- Duty cycle (PWM) 00 - 7F
	- Detune 00 - 40 - 7F
	- volume envelope (4 bytes)
	- pitch envelope  (4 bytes)
	- filter envelope (4 bytes)
	- Q ("peak")	00 - 7F
- OSC2 params:
	- Same as OSC1
- Patch LFO settings (become current LFO settings when patch selected)
	- LFO waveform 00 - ??
	- LFO freq ??
	- LFO pitch envelope	(4 bytes)
	- LFO volume envelope	(4 bytes)
	- LFO filter envelope	(4 bytes)
	- LFO PWM envelope      (4 bytes)
- Patch Mod settings (become current mod settings when patch selected)
	- Pitch bend range 00 - 40 - 7F
	- Modulation range 00 - 7F
	- Modulation target(s) ??


/// Pack a scaled value (between 0.0 and 1.0) to a byte (0 to 7F)
char packScaledValue(float value (0.0 to 1.0), char min, char max);

Patch::packParams()
	Oscillator::packParams()
	LFO::packParams()
	Modulator::packParams()




GUI System:

Controls:

	- Text label	(CGUILabel)  type 1
	
- Text Edit
	(CGUIEdit)   type 2
	- Button	(CGUIButton) type 3
	- Slider
	(CGUISlider) type 4
	- Envelope "button"	(CGUIEnvelope)  type 5
	
- Option list (circular options list) (CGUIOptionsList) type 6

CGUI class to manage controls:
	- AddControl(x, y, w, h, type, name, text) function
	- FindControl(x,y) function
	- ArrangeControls() function to reposition/resize controls according to screen size.


CGUIControl base class:
	Type, Name, Rect, Text value, Option list, Data array (floats)
	OnClick(pt) function

	OnSwipe(dx, dy) function

	Draw() function
	SetOptions() function
	GetSelectedOption() function
	GetText() function
	GetData() function

enum CONTROLTYPE {
	CT_LABEL = 1,
	CT_EDIT,
	CT_BUTTON,
	CT_SLIDER,
	CT_ENVELOPE,
	CT_OPTIONLIST
};

MAIN PAGE CONTROL LIST:  (based on 480 x 272 screen)
X    Y    W     H    TYPE    		NAME		TEXT
10   10   330   20   CT_EDIT		"PatchName" 	""
10   40   50    10   CT_LABEL		"OSC1Label"	"OSC1"
20   60   70    10   CT_LABEL           "WF1Label"      "Waveform"
20   80   70    10   CT_LABEL		"Duty1Label"	"Duty %"
20   100  70    10   CT_LABEL		"Detune1Label"	"Detune"
20   120  70    10   CT_LABEL		"VEnv1Label"	"Vol Env"
20   140  70    10   CT_LABEL		"PEnv1Label"	"Pitch Env"
20   160  70    10   CT_LABEL		"FEnv1Label"	"Filter Env"
100  55   60    17   CT_OPTIONLIST	"WF1Option"	""
100  75   60    17   CT_SLIDER		"Duty1Slider"	""
100  95   60    17   CT_SLIDER		"Detune1Slider"	""
100  115  60    17   CT_ENVELOPE	"VEnv1Envelope" ""
100  135  60    17   CT_ENVELOPE	"PEnv1Envelope" ""
100  155  60    17   CT_ENVELOPE	"FEnv1Envelope" ""

170  40   50    10   CT_LABEL		"OSC2Label"	"OSC2"
180  60   70    10   CT_LABEL           "WF2Label"      "Waveform"
180  80   70    10   CT_LABEL		"Duty2Label"	"Duty %"
180  100  70    10   CT_LABEL		"Detune2Label"	"Detune"
180  120  70    10   CT_LABEL		"VEnv2Label"	"Vol Env"
180  140  70    10   CT_LABEL		"PEnv2Label"	"Pitch Env"
180  160  70    10   CT_LABEL		"FEnv2Label"	"Filter Env"
260  55   60    17   CT_OPTIONLIST	"WF2Option"	""
260  75   60    17   CT_SLIDER		"Duty2Slider"	""
260  95   60    17   CT_SLIDER		"Detune2Slider"	""
260  115  60    17   CT_ENVELOPE	"VEnv2Envelope" ""
260  135  60    17   CT_ENVELOPE	"PEnv2Envelope" ""
260  155  60    17   CT_ENVELOPE	"FEnv2Envelope" ""

330  40   50    10   CT_LABEL		"LFOLabel"	"LFO"
340  60   70    10   CT_LABEL           "LFOWFLabel"    "Waveform"
340  80   70    10   CT_LABEL		"LFOFreqLabel"	"Freq."
340  100  70    10   CT_LABEL		"LFOVEnvLabel"	"Vol Env"
340  120  70    10   CT_LABEL		"LFOPEnvLabel"	"Pitch Env"
340  140  70    10   CT_LABEL		"LFOFEnvLabel"	"Filter Env"
340  160  70    10   CT_LABEL		"LFOPWMEnvLabel"	"PWM Env"
420  55   60    17   CT_OPTIONLIST	"LFOWFOption"	""
420  75   60    17   CT_SLIDER		"LFOFreqSlider"	""
420  95   60    17   CT_ENVELOPE	"LFOVolEnvelope"	""
420  115  60    17   CT_ENVELOPE	"LFOPitchEnvelope" ""
420  135  60    17   CT_ENVELOPE	"LFOFilterEnvelope" ""
420  155  60    17   CT_ENVELOPE	"LFOPWMEnvelope" ""

10   190  40    10   CT_LABEL		"MODLabel"	"MOD"
20   210  70    10   CT_LABEL		"PB Range"	""
20   230  70    10   CT_LABEL		"Mod Target"	""
20   250  70    10   CT_LABEL		"Mod Range"	""
100  205  60    17   CT_SLIDER		"PBRangeSlider"	""
100  225  60    17   CT_OPTIONLIST	"ModTargetOption"	""
100  245  60    17   CT_SLIDER		"ModRangeSlider"	""



Envelope Editor:

+--------+---+------------+----+------+
|       /:\  :            :    :      |  A: [          ] 200 ms
|      / : \ :            :    :      |
|     /  :  \:            :    :      |  D: [          ] 100 ms
|    /   :   +----\ \-----+    :      |
|   /    :   :            :\   :      |  S: [          ] 80%
|  /     :   :            : \  :      |
| /      :   :            :  \ :      |  R: [          ] 1000 ms
|/       :   :            :   \:      |
+--------+---+------------+----+------+


One pole LP filter

Type : Simple 1 pole LP and HP filter
References : Posted by scoofy[AT]inf[DOT]elte[DOT]hu

Notes : 
Slope: 6dB/Oct

Reference: www.dspguide.com

Coefficient calculation:
x = exp(-2.0*pi*freq/samplerate);
a0 = 1.0-x;
b1 = -x;

Code : 

Process loop (lowpass):
out = a0*in - b1*tmp;
tmp = out;


/// Simple 1-pole LP filter class
class CLPFilter
{
public:
	CLPFilter(float sampleRate)
		{
		m_sampleRate = sampleRate;
		m_prevValue = 0.0f;
		}

	void SetCutoffFreq(float freq)
		{
		float k = exp(-2.0 * PI * freq / m_sampleRate);
		m_a = 1.0 - k;
		m_b = -k;
		}

	void Apply(float *buffer, int length)
		{
		for (int i = 0; i < length; i++)
			{
			float out = m_a * buffer[i] - m_b * m_prevValue;
			m_prevValue = out;
			buffer[i] = out;
			}
		}

private:
	float m_prevValue;
	float m_sampleRate;
}
